{
  "address": "0x0E02C9a74d14aFfe79B305AE50c622548862Fc10",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fromTokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_toTokenId",
          "type": "uint256"
        }
      ],
      "name": "BatchMetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "MetadataUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "colors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nextIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getNextRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "addr",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "name": "getRandomRange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "speeds",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6ce434c584871fa2035f91f26c3eeb5c47d5e529be9c5fce85722d149477c81",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x656a5A16DF0A0B5d87f662206ada74D006483542",
    "contractAddress": "0x0E02C9a74d14aFfe79B305AE50c622548862Fc10",
    "transactionIndex": 0,
    "gasUsed": "5109940",
    "logsBloom": "0x
    "blockHash": "0xe55157ce1e8c959fbdaa5f47c196c3e5115c1c42018104c5dc6ae9dbafda9809",
    "transactionHash": "0xf6ce434c584871fa2035f91f26c3eeb5c47d5e529be9c5fce85722d149477c81",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1190460,
        "transactionHash": "0xf6ce434c584871fa2035f91f26c3eeb5c47d5e529be9c5fce85722d149477c81",
        "address": "0x0E02C9a74d14aFfe79B305AE50c622548862Fc10",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000656a5a16df0a0b5d87f662206ada74d006483542",
          "0x000000000000000000000000656a5a16df0a0b5d87f662206ada74d006483542"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe55157ce1e8c959fbdaa5f47c196c3e5115c1c42018104c5dc6ae9dbafda9809"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1190460,
        "transactionHash": "0xf6ce434c584871fa2035f91f26c3eeb5c47d5e529be9c5fce85722d149477c81",
        "address": "0x0E02C9a74d14aFfe79B305AE50c622548862Fc10",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000656a5a16df0a0b5d87f662206ada74d006483542",
          "0x000000000000000000000000656a5a16df0a0b5d87f662206ada74d006483542"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xe55157ce1e8c959fbdaa5f47c196c3e5115c1c42018104c5dc6ae9dbafda9809"
      }
    ],
    "blockNumber": 1190460,
    "cumulativeGasUsed": "5109940",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 12,
  "solcInputHash": "974683319fd9893a8bb4251ec38564b2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"colors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"}],\"name\":\"getNextRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nextIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getNextRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"addr\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"getRandomRange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"speeds\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getNextRandomNumber(uint256)\":{\"params\":{\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"The randon number with an additional index iteration. This shold be used for multiple values in the same block\"}},\"getNextRandomRange(uint256,uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\",\"nextIndex\":\"The nextIndex to interate the RNG value by\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getRandomBytes()\":{\"details\":\"Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\"},\"getRandomNumber()\":{\"returns\":{\"_0\":\"The randon number\"}},\"getRandomRange(uint256)\":{\"params\":{\"max\":\"The maximum number the random number should be inclusive\"},\"returns\":{\"_0\":\"Random number between 0 & max\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DynamicNFT.sol\":\"DynamicNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@dirtroad/skale-rng/contracts/RNG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * RNG Endpoint Code for Function getRandomBytes() is taken from the SKALE Network Documentation here: https://docs.skale.network/tools/skale-specific/random-number-generator\\n */\\ncontract RNG {\\n\\n    /**\\n     * @dev Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator\\n     */\\n    function getRandomBytes() public view returns (bytes32 addr) {\\n        assembly {\\n            let freemem := mload(0x40)\\n            let start_addr := add(freemem, 0)\\n            if iszero(staticcall(gas(), 0x18, 0, 0, start_addr, 32)) {\\n              invalid()\\n            }\\n            addr := mload(freemem)\\n        }\\n    }\\n    \\n    /**\\n     * @return The randon number\\n     */\\n\\tfunction getRandomNumber() public view returns (uint256) {\\n\\t\\treturn uint256(getRandomBytes());\\n\\t}\\n    \\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @return The randon number with an additional index iteration. This shold be used for multiple values in the same block\\n     */\\n\\tfunction getNextRandomNumber(uint256 nextIndex) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex)));\\n\\t}\\n\\n\\n    /**\\n     * @param nextIndex The nextIndex to interate the RNG value by\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getNextRandomRange(uint256 nextIndex, uint256 max) public view returns (uint256) {\\n\\t\\treturn uint256(keccak256(abi.encode(getRandomNumber() | nextIndex))) % max;\\n\\t}\\n    \\n    /**\\n     * @param max The maximum number the random number should be inclusive\\n     * @return Random number between 0 & max\\n     */\\n\\tfunction getRandomRange(uint256 max) public view returns (uint256) {\\n\\t\\treturn getRandomNumber() % max;\\n\\t}\\n}\\n\",\"keccak256\":\"0xcf843a8380b7fd633d51c8df1eb311602b814ce3fa552f9ece6d483185961ef4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/DynamicNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@dirtroad/skale-rng/contracts/RNG.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./SVG.sol\\\";\\nimport \\\"./Encoder.sol\\\";\\n\\ncontract DynamicNFT is RNG, ERC721, ERC721Enumerable, ERC721URIStorage, AccessControl {\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter public tokenIdCounter;\\n\\n    mapping(uint256 => string) public colors;\\n    mapping(uint256 => uint8[]) public speeds;\\n\\n    constructor() ERC721(\\\"DynamicNFT\\\", \\\"DNFT\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n    }\\n\\n    function safeMint(address to) public onlyRole(MINTER_ROLE) {\\n        uint256 tokenId = tokenIdCounter.current();\\n        tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        uint8 arrSize = 6;\\n\\n        uint8[] memory randomNumbers = new uint8[](arrSize);\\n        for (uint8 i = 0; i < arrSize; i++) {\\n            if (i < 3) {\\n                randomNumbers[i] = uint8(getNextRandomRange(i, 255));\\n            } else {\\n                randomNumbers[i] = uint8(1 + getNextRandomRange(i, 36));\\n            }\\n        }\\n\\n        colors[tokenIdCounter.current()] = string.concat(Strings.toString(randomNumbers[0]), \\\",\\\", Strings.toString(randomNumbers[1]), \\\",\\\", Strings.toString(randomNumbers[2]));\\n        speeds[tokenIdCounter.current()] = [randomNumbers[3], randomNumbers[4], randomNumbers[5]];\\n    }\\n\\n    // The following functions are overrides required by Solidity.\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId, uint256 batchSize)\\n        internal\\n        override(ERC721, ERC721Enumerable)\\n    {\\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\\n    }\\n\\n    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {\\n        super._burn(tokenId);\\n    }\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override(ERC721, ERC721URIStorage)\\n        returns (string memory)\\n    {\\n        return Encoder.encodeNFTMetadata(\\n            name(),\\n            \\\"Dynamic NFT Smart Contract\\\",\\n            Encoder.encodeSVG(SVG.load(colors[tokenId], speeds[tokenId]))\\n        );\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xb4853348c21d4ce57edf6d3d56512c7a49794ceb81bdccca83d1a30fe79793a8\",\"license\":\"MIT\"},\"contracts/Encoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary Encoder {\\n\\n    using Strings for uint256;\\n\\n    function encodeSVG(bytes memory _svg) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\n            \\\"data:image/svg+xml;base64,\\\",\\n            Base64.encode(_svg)\\n        ));\\n        // return _svg;\\n    }\\n\\n    function encodeNFTMetadata(string memory name, string memory description, string memory image) internal pure returns (string memory) {\\n\\n        return string(abi.encodePacked(\\n            \\\"data:application/json;base64,\\\",\\n            Base64.encode(\\n                bytes(\\n                    abi.encodePacked(\\n                        '{',\\n                            '\\\"name\\\": \\\"', name, '\\\", ',\\n                            '\\\"description\\\":\\\"', description, '\\\", ',\\n                            '\\\"image\\\": \\\"', image, '\\\"',\\n                        '}'\\n                    )\\n                )\\n            )\\n        ));\\n    }\\n}\\n\",\"keccak256\":\"0x90fd95d0ec169e30d991b7c1714b93a170cc8d07906acec7faef19c540b246c8\",\"license\":\"MIT\"},\"contracts/SVG.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nlibrary SVG {\\n\\n    function load(\\n        string memory rgb,\\n        uint8[] memory speeds\\n    ) public pure returns (bytes memory) {\\n        return abi.encodePacked(\\n            \\\"<svg xmlns='http://www.w3.org/2000/svg'>\\\",\\n            \\\"<defs>\\\",\\n            \\\"<radialGradient id='planetGradient' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\\\",\\n            \\\"<stop offset='0%' style='stop-color: rbg(\\\",rgb,\\\");stop-opacity:1' />\\\",\\n            \\\"<stop offset='100%' style='stop-color:#666666;stop-opacity:1' />\\\",\\n            \\\"</radialGradient>\\\",\\n            \\\"<radialGradient id='moon1Gradient' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\\\",\\n            \\\"<stop offset='0%' style='stop-color:#ffcc00;stop-opacity:1' />\\\",\\n            \\\"<stop offset='100%' style='stop-color:#ff9900;stop-opacity:1' />\\\",\\n            \\\"</radialGradient>\\\",\\n            \\\"<radialGradient id='moon2Gradient' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\\\",\\n            \\\"<stop offset='0%' style='stop-color:#ff00ff;stop-opacity:1' />\\\",\\n            \\\"<stop offset='100%' style='stop-color:#9900ff;stop-opacity:1' />\\\",\\n            \\\"</radialGradient>\\\",\\n            \\\"<radialGradient id='moon3Gradient' cx='50%' cy='50%' r='50%' fx='50%' fy='50%'>\\\",\\n            \\\"<stop offset='0%' style='stop-color:#00ff00;stop-opacity:1' />\\\",\\n            \\\"<stop offset='100%' style='stop-color:#00cc00;stop-opacity:1' />\\\",\\n            \\\"</radialGradient>\\\",\\n            \\\"<filter id='shadowFilter' x='-30%' y='-30%' width='160%' height='160%'>\\\",\\n            \\\"<feDropShadow dx='0' dy='0' stdDeviation='4' flood-color='#000000' flood-opacity='0.5' />\\\",\\n            \\\"</filter>\\\",\\n            \\\"<filter id='craterFilter'>\\\",\\n            \\\"<feOffset dx='1' dy='1' in='SourceAlpha' result='offset' />\\\",\\n            \\\"<feGaussianBlur in='offset' stdDeviation='1' result='blur' />\\\",\\n            \\\"<feSpecularLighting in='blur' surfaceScale='2' specularConstant='0.75' specularExponent='20' lighting-color='#999999' result='specular'>\\\",\\n            \\\"<fePointLight x='-5000' y='-10000' z='20000' />\\\",\\n            \\\"</feSpecularLighting>\\\",\\n            \\\"<feComposite in='specular' in2='SourceAlpha' operator='in' result='composite' />\\\",\\n            \\\"<feComposite in='SourceGraphic' in2='composite' operator='arithmetic' k1='0' k2='1' k3='1' k4='0' result='litPaint' />\\\",\\n            \\\"</filter>\\\",\\n            \\\"</defs>\\\",\\n            \\\"<rect width='100%' height='100%' fill='#000000' />\\\",\\n            \\\"<g filter='url(#shadowFilter)'>\\\",\\n            \\\"<circle cx='30' cy='20' r='0.5' fill='#ffffff' />\\\",\\n            \\\"<circle cx='230' cy='50' r='0.8' fill='#ff9900' />\\\",\\n            \\\"<circle cx='120' cy='80' r='1.2' fill='#ffcc00' />\\\",\\n            \\\"<circle cx='200' cy='50' r='0.7' fill='#ffffff' />\\\",\\n            \\\"<circle cx='230' cy='70' r='1.0' fill='#ff9900' />\\\",\\n            \\\"<circle cx='250' cy='25' r='0.9' fill='#ffcc00' />\\\",\\n            \\\"<circle cx='15' cy='200' r='0.5' fill='#ffffff' />\\\",\\n            \\\"<circle cx='25' cy='230' r='0.8' fill='#ff9900' />\\\",\\n            \\\"<circle cx='75' cy='190' r='1.0' fill='#ffcc00' />\\\",\\n            \\\"<circle cx='125' cy='230' r='0.7' fill='#ffffff' />\\\",\\n            \\\"</g>\\\",\\n            \\\"<circle cx='150' cy='150' r='100' fill='url(#planetGradient)' filter='url(#shadowFilter)' />\\\",\\n            \\\"<g transform='rotate(0 150 150)'>\\\",\\n            \\\"<circle cx='260' cy='70' r='10' fill='url(#moon1Gradient)' filter='url(#shadowFilter)'>\\\",\\n            \\\"<animateTransform attributeName='transform' type='rotate' from='0 150 150' to='360 150 150' dur='\\\",Strings.toString(speeds[0]),\\\"s' repeatCount='indefinite' />\\\",\\n            \\\"<animateMotion dur='8s' repeatCount='indefinite'>\\\",\\n            \\\"<mpath href='#moonPath1' />\\\",\\n            \\\"</animateMotion>\\\",\\n            \\\"</circle>\\\",\\n            \\\"<circle cx='270' cy='220' r='15' fill='url(#moon2Gradient)' filter='url(#shadowFilter)'>\\\",\\n            \\\"<animateTransform attributeName='transform' type='rotate' from='0 150 150' to='360 150 150' dur='\\\",Strings.toString(speeds[1]),\\\"s' repeatCount='indefinite' />\\\",\\n            \\\"<animateMotion dur='12s' repeatCount='indefinite'>\\\",\\n            \\\"<mpath href='#moonPath2' />\\\",\\n            \\\"</animateMotion>\\\",\\n            \\\"</circle>\\\",\\n            \\\"<circle cx='235' cy='210' r='12' fill='url(#moon3Gradient)' filter='url(#shadowFilter)'>\\\",\\n            \\\"<animateTransform attributeName='transform' type='rotate' from='0 150 150' to='360 150 150' dur='\\\",Strings.toString(speeds[2]),\\\"s' repeatCount='indefinite' />\\\",\\n            \\\"<animateMotion dur='10s' repeatCount='indefinite'>\\\",\\n            \\\"<mpath href='#moonPath3' />\\\",\\n            \\\"</animateMotion>\\\",\\n            \\\"</circle>\\\",\\n            \\\"</g>\\\",\\n            \\\"<circle id='moonPath1' cx='150' cy='150' r='90' fill='none' />\\\",\\n            \\\"<circle id='moonPath2' cx='150' cy='150' r='110' fill='none' />\\\",\\n            \\\"<circle id='moonPath3' cx='150' cy='150' r='130' fill='none' />\\\",\\n            \\\"<circle cx='150' cy='150' r='60' fill='rgba(0, 0, 0, 0.2)' filter='url(#shadowFilter)' />\\\",\\n            \\\"<circle cx='100' cy='120' r='7' fill='#888858' filter='url(#craterFilter)' />\\\",\\n            \\\"<circle cx='170' cy='180' r='10' fill='#878888' filter='url(#craterFilter)' />\\\",\\n            \\\"<circle cx='130' cy='240' r='8' fill='#888858' filter='url(#craterFilter)' />\\\",\\n            \\\"<circle cx='70' cy='190' r='9' fill='#878888' filter='url(#craterFilter)' />\\\",\\n            \\\"</svg>\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xcb0d356ccf79288cfb533155ee779a8c0cbb4356cc2b33b0e02653f927c6553a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600a81526020017f44796e616d69634e4654000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f444e46540000000000000000000000000000000000000000000000000000000081525081600090816200008f9190620004d0565b508060019081620000a19190620004d0565b505050620000b96000801b33620000f160201b60201c565b620000eb7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633620000f160201b60201c565b620005b7565b620001038282620001e360201b60201c565b620001df576001600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620001846200024e60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002d857607f821691505b602082108103620002ee57620002ed62000290565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003587fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000319565b62000364868362000319565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003b1620003ab620003a5846200037c565b62000386565b6200037c565b9050919050565b6000819050919050565b620003cd8362000390565b620003e5620003dc82620003b8565b84845462000326565b825550505050565b600090565b620003fc620003ed565b62000409818484620003c2565b505050565b5b81811015620004315762000425600082620003f2565b6001810190506200040f565b5050565b601f82111562000480576200044a81620002f4565b620004558462000309565b8101602085101562000465578190505b6200047d620004748562000309565b8301826200040e565b50505b505050565b600082821c905092915050565b6000620004a56000198460080262000485565b1980831691505092915050565b6000620004c0838362000492565b9150826002028217905092915050565b620004db8262000256565b67ffffffffffffffff811115620004f757620004f662000261565b5b620005038254620002bf565b6200051082828562000435565b600060209050601f83116001811462000548576000841562000533578287015190505b6200053f8582620004b2565b865550620005af565b601f1984166200055886620002f4565b60005b8281101562000582578489015182556001820191506020850194506020810190506200055b565b86831015620005a257848901516200059e601f89168262000492565b8355505b6001600288020188555050505b505050505050565b6159cc80620005c76000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806391d148541161010f578063bd11f69d116100a2578063d547741f11610071578063d547741f14610617578063dbdff2c114610633578063e985e9c514610651578063ec4d5ce214610681576101f0565b8063bd11f69d14610569578063c46e63f414610599578063c87b56dd146105c9578063d5391393146105f9576101f0565b8063a217fddf116100de578063a217fddf146104f5578063a22cb46514610513578063b88d4fde1461052f578063ba23ec8e1461054b576101f0565b806391d148541461045957806395d89b411461048957806395fa9135146104a757806398bdf6f5146104d7576101f0565b80632f745c591161018757806342842e0e1161015657806342842e0e146103ad5780634f6ccce7146103c95780636352211e146103f957806370a0823114610429576101f0565b80632f745c591461031557806336568abe146103455780633c051a921461036157806340d097c314610391576101f0565b806318160ddd116101c357806318160ddd1461028f57806323b872dd146102ad578063248a9ca3146102c95780632f2ff15d146102f9576101f0565b806301ffc9a7146101f557806306fdde0314610225578063081812fc14610243578063095ea7b314610273575b600080fd5b61020f600480360381019061020a9190613093565b6106b1565b60405161021c91906130db565b60405180910390f35b61022d6106c3565b60405161023a9190613186565b60405180910390f35b61025d600480360381019061025891906131de565b610755565b60405161026a919061324c565b60405180910390f35b61028d60048036038101906102889190613293565b61079b565b005b6102976108b2565b6040516102a491906132e2565b60405180910390f35b6102c760048036038101906102c291906132fd565b6108bf565b005b6102e360048036038101906102de9190613386565b61091f565b6040516102f091906133c2565b60405180910390f35b610313600480360381019061030e91906133dd565b61093f565b005b61032f600480360381019061032a9190613293565b610960565b60405161033c91906132e2565b60405180910390f35b61035f600480360381019061035a91906133dd565b610a05565b005b61037b6004803603810190610376919061341d565b610a88565b60405161038891906132e2565b60405180910390f35b6103ab60048036038101906103a6919061345d565b610ad0565b005b6103c760048036038101906103c291906132fd565b610d94565b005b6103e360048036038101906103de91906131de565b610db4565b6040516103f091906132e2565b60405180910390f35b610413600480360381019061040e91906131de565b610e25565b604051610420919061324c565b60405180910390f35b610443600480360381019061043e919061345d565b610eab565b60405161045091906132e2565b60405180910390f35b610473600480360381019061046e91906133dd565b610f62565b60405161048091906130db565b60405180910390f35b610491610fcd565b60405161049e9190613186565b60405180910390f35b6104c160048036038101906104bc91906131de565b61105f565b6040516104ce91906132e2565b60405180910390f35b6104df61109b565b6040516104ec91906132e2565b60405180910390f35b6104fd6110a7565b60405161050a91906133c2565b60405180910390f35b61052d600480360381019061052891906134b6565b6110ae565b005b6105496004803603810190610544919061362b565b6110c4565b005b610553611126565b60405161056091906133c2565b60405180910390f35b610583600480360381019061057e91906131de565b611148565b6040516105909190613186565b60405180910390f35b6105b360048036038101906105ae91906131de565b6111e8565b6040516105c091906132e2565b60405180910390f35b6105e360048036038101906105de91906131de565b611204565b6040516105f09190613186565b60405180910390f35b6106016112fe565b60405161060e91906133c2565b60405180910390f35b610631600480360381019061062c91906133dd565b611322565b005b61063b611343565b60405161064891906132e2565b60405180910390f35b61066b600480360381019061066691906136ae565b611355565b60405161067891906130db565b60405180910390f35b61069b6004803603810190610696919061341d565b6113e9565b6040516106a8919061370a565b60405180910390f35b60006106bc8261142c565b9050919050565b6060600080546106d290613754565b80601f01602080910402602001604051908101604052809291908181526020018280546106fe90613754565b801561074b5780601f106107205761010080835404028352916020019161074b565b820191906000526020600020905b81548152906001019060200180831161072e57829003601f168201915b5050505050905090565b6000610760826114a6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107a682610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d906137f7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108356114f1565b73ffffffffffffffffffffffffffffffffffffffff16148061086457506108638161085e6114f1565b611355565b5b6108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a90613889565b60405180910390fd5b6108ad83836114f9565b505050565b6000600880549050905090565b6108d06108ca6114f1565b826115b2565b61090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109069061391b565b60405180910390fd5b61091a838383611647565b505050565b6000600b6000838152602001908152602001600020600101549050919050565b6109488261091f565b61095181611940565b61095b8383611954565b505050565b600061096b83610eab565b82106109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a3906139ad565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610a0d6114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190613a3f565b60405180910390fd5b610a848282611a35565b5050565b60008183610a94611343565b17604051602001610aa591906132e2565b6040516020818303038152906040528051906020012060001c610ac89190613a8e565b905092915050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610afa81611940565b6000610b06600c611b17565b9050610b12600c611b25565b610b1c8382611b3b565b60006006905060008160ff1667ffffffffffffffff811115610b4157610b40613500565b5b604051908082528060200260200182016040528015610b6f5781602001602082028036833780820191505090505b50905060005b8260ff168160ff161015610c245760038160ff161015610bcc57610b9d8160ff1660ff610a88565b828260ff1681518110610bb357610bb2613abf565b5b602002602001019060ff16908160ff1681525050610c11565b610bda8160ff166024610a88565b6001610be69190613b1d565b828260ff1681518110610bfc57610bfb613abf565b5b602002602001019060ff16908160ff16815250505b8080610c1c90613b51565b915050610b75565b50610c4c81600081518110610c3c57610c3b613abf565b5b602002602001015160ff16611b59565b610c7382600181518110610c6357610c62613abf565b5b602002602001015160ff16611b59565b610c9a83600281518110610c8a57610c89613abf565b5b602002602001015160ff16611b59565b604051602001610cac93929190613bdc565b604051602081830303815290604052600d6000610cc9600c611b17565b81526020019081526020016000209081610ce39190613dd7565b50604051806060016040528082600381518110610d0357610d02613abf565b5b602002602001015160ff1660ff16815260200182600481518110610d2a57610d29613abf565b5b602002602001015160ff1660ff16815260200182600581518110610d5157610d50613abf565b5b602002602001015160ff1660ff16815250600e6000610d70600c611b17565b8152602001908152602001600020906003610d8c929190612f63565b505050505050565b610daf838383604051806020016040528060008152506110c4565b505050565b6000610dbe6108b2565b8210610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690613f1b565b60405180910390fd5b60088281548110610e1357610e12613abf565b5b90600052602060002001549050919050565b600080610e3183611c27565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9990613f87565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290614019565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610fdc90613754565b80601f016020809104026020016040519081016040528092919081815260200182805461100890613754565b80156110555780601f1061102a57610100808354040283529160200191611055565b820191906000526020600020905b81548152906001019060200180831161103857829003601f168201915b5050505050905090565b60008161106a611343565b1760405160200161107b91906132e2565b6040516020818303038152906040528051906020012060001c9050919050565b600c8060000154905081565b6000801b81565b6110c06110b96114f1565b8383611c64565b5050565b6110d56110cf6114f1565b836115b2565b611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b9061391b565b60405180910390fd5b61112084848484611dd0565b50505050565b60006040516000810160208160008060185afa61113f57fe5b81519250505090565b600d602052806000526040600020600091509050805461116790613754565b80601f016020809104026020016040519081016040528092919081815260200182805461119390613754565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b505050505081565b6000816111f3611343565b6111fd9190613a8e565b9050919050565b60606112f76112116106c3565b6040518060400160405280601a81526020017f44796e616d6963204e465420536d61727420436f6e74726163740000000000008152506112f273E2419bEDDe902C38ff2D9e9cAD6ca5D34B78884063452955e4600d6000898152602001908152602001600020600e60008a81526020019081526020016000206040518363ffffffff1660e01b81526004016112a7929190614e41565b600060405180830381865af41580156112c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112ed9190614ee8565b611e2c565b611e5d565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61132b8261091f565b61133481611940565b61133e8383611a35565b505050565b600061134d611126565b60001c905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600e602052816000526040600020818154811061140557600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061149f575061149e82611eb3565b5b9050919050565b6114af81611f14565b6114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613f87565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661156c83610e25565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806115be83610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061160057506115ff8185611355565b5b8061163e57508373ffffffffffffffffffffffffffffffffffffffff1661162684610755565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661166782610e25565b73ffffffffffffffffffffffffffffffffffffffff16146116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b490614fa3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390615035565b60405180910390fd5b6117398383836001611f55565b8273ffffffffffffffffffffffffffffffffffffffff1661175982610e25565b73ffffffffffffffffffffffffffffffffffffffff16146117af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a690614fa3565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461193b8383836001611f67565b505050565b6119518161194c6114f1565b611f6d565b50565b61195e8282610f62565b611a31576001600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119d66114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a3f8282610f62565b15611b13576000600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ab86114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600081600001549050919050565b6001816000016000828254019250508190555050565b611b55828260405180602001604052806000815250611ff2565b5050565b606060006001611b688461204d565b01905060008167ffffffffffffffff811115611b8757611b86613500565b5b6040519080825280601f01601f191660200182016040528015611bb95781602001600182028036833780820191505090505b509050600082602001820190505b600115611c1c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c1057611c0f613a5f565b5b04945060008503611bc7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc9906150a1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dc391906130db565b60405180910390a3505050565b611ddb848484611647565b611de7848484846121a0565b611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90615133565b60405180910390fd5b50505050565b6060611e3782612327565b604051602001611e47919061519f565b6040516020818303038152906040529050919050565b6060611e8b848484604051602001611e77939291906153d5565b604051602081830303815290604052612327565b604051602001611e9b91906154aa565b60405160208183030381529060405290509392505050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f0d5750611f0c8261248a565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f3683611c27565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611f6184848484612504565b50505050565b50505050565b611f778282610f62565b611fee57611f8481612662565b611f928360001c602061268f565b604051602001611fa3929190615564565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe59190613186565b60405180910390fd5b5050565b611ffc83836128cb565b61200960008484846121a0565b612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90615133565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120ab577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120a1576120a0613a5f565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106120e8576d04ee2d6d415b85acef810000000083816120de576120dd613a5f565b5b0492506020810190505b662386f26fc10000831061211757662386f26fc10000838161210d5761210c613a5f565b5b0492506010810190505b6305f5e1008310612140576305f5e100838161213657612135613a5f565b5b0492506008810190505b612710831061216557612710838161215b5761215a613a5f565b5b0492506004810190505b60648310612188576064838161217e5761217d613a5f565b5b0492506002810190505b600a8310612197576001810190505b80915050919050565b60006121c18473ffffffffffffffffffffffffffffffffffffffff16612ae8565b1561231a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121ea6114f1565b8786866040518563ffffffff1660e01b815260040161220c94939291906155f3565b6020604051808303816000875af192505050801561224857506040513d601f19601f820116820180604052508101906122459190615654565b60015b6122ca573d8060008114612278576040519150601f19603f3d011682016040523d82523d6000602084013e61227d565b606091505b5060008151036122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b990615133565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061231f565b600190505b949350505050565b6060600082510361234957604051806020016040528060008152509050612485565b600060405180606001604052806040815260200161595760409139905060006003600285516123789190613b1d565b6123829190615681565b600461238e91906156b2565b67ffffffffffffffff8111156123a7576123a6613500565b5b6040519080825280601f01601f1916602001820160405280156123d95781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612445576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506123ea565b505060038651066001811461246157600281146124745761247c565b603d6001830353603d600283035361247c565b603d60018303535b50505080925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806124fd57506124fc82612b0b565b5b9050919050565b61251084848484612bed565b6001811115612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254b90615766565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361259b5761259681612bf3565b6125da565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146125d9576125d88582612c3c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361261c5761261781612da9565b61265b565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461265a576126598482612e7a565b5b5b5050505050565b60606126888273ffffffffffffffffffffffffffffffffffffffff16601460ff1661268f565b9050919050565b6060600060028360026126a291906156b2565b6126ac9190613b1d565b67ffffffffffffffff8111156126c5576126c4613500565b5b6040519080825280601f01601f1916602001820160405280156126f75781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061272f5761272e613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061279357612792613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026127d391906156b2565b6127dd9190613b1d565b90505b600181111561287d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061281f5761281e613abf565b5b1a60f81b82828151811061283657612835613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061287690615786565b90506127e0565b50600084146128c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b8906157fb565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361293a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293190615867565b60405180910390fd5b61294381611f14565b15612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297a906158d3565b60405180910390fd5b612991600083836001611f55565b61299a81611f14565b156129da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d1906158d3565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612ae4600083836001611f67565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612bd657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612be65750612be582612ef9565b5b9050919050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612c4984610eab565b612c5391906158f3565b9050600060076000848152602001908152602001600020549050818114612d38576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612dbd91906158f3565b9050600060096000848152602001908152602001600020549050600060088381548110612ded57612dec613abf565b5b906000526020600020015490508060088381548110612e0f57612e0e613abf565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612e5e57612e5d615927565b5b6001900381819060005260206000200160009055905550505050565b6000612e8583610eab565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b82805482825590600052602060002090601f01602090048101928215612ff95791602002820160005b83821115612fca57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612f8c565b8015612ff75782816101000a81549060ff0219169055600101602081600001049283019260010302612fca565b505b509050613006919061300a565b5090565b5b8082111561302357600081600090555060010161300b565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130708161303b565b811461307b57600080fd5b50565b60008135905061308d81613067565b92915050565b6000602082840312156130a9576130a8613031565b5b60006130b78482850161307e565b91505092915050565b60008115159050919050565b6130d5816130c0565b82525050565b60006020820190506130f060008301846130cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613130578082015181840152602081019050613115565b60008484015250505050565b6000601f19601f8301169050919050565b6000613158826130f6565b6131628185613101565b9350613172818560208601613112565b61317b8161313c565b840191505092915050565b600060208201905081810360008301526131a0818461314d565b905092915050565b6000819050919050565b6131bb816131a8565b81146131c657600080fd5b50565b6000813590506131d8816131b2565b92915050565b6000602082840312156131f4576131f3613031565b5b6000613202848285016131c9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132368261320b565b9050919050565b6132468161322b565b82525050565b6000602082019050613261600083018461323d565b92915050565b6132708161322b565b811461327b57600080fd5b50565b60008135905061328d81613267565b92915050565b600080604083850312156132aa576132a9613031565b5b60006132b88582860161327e565b92505060206132c9858286016131c9565b9150509250929050565b6132dc816131a8565b82525050565b60006020820190506132f760008301846132d3565b92915050565b60008060006060848603121561331657613315613031565b5b60006133248682870161327e565b93505060206133358682870161327e565b9250506040613346868287016131c9565b9150509250925092565b6000819050919050565b61336381613350565b811461336e57600080fd5b50565b6000813590506133808161335a565b92915050565b60006020828403121561339c5761339b613031565b5b60006133aa84828501613371565b91505092915050565b6133bc81613350565b82525050565b60006020820190506133d760008301846133b3565b92915050565b600080604083850312156133f4576133f3613031565b5b600061340285828601613371565b92505060206134138582860161327e565b9150509250929050565b6000806040838503121561343457613433613031565b5b6000613442858286016131c9565b9250506020613453858286016131c9565b9150509250929050565b60006020828403121561347357613472613031565b5b60006134818482850161327e565b91505092915050565b613493816130c0565b811461349e57600080fd5b50565b6000813590506134b08161348a565b92915050565b600080604083850312156134cd576134cc613031565b5b60006134db8582860161327e565b92505060206134ec858286016134a1565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135388261313c565b810181811067ffffffffffffffff8211171561355757613556613500565b5b80604052505050565b600061356a613027565b9050613576828261352f565b919050565b600067ffffffffffffffff82111561359657613595613500565b5b61359f8261313c565b9050602081019050919050565b82818337600083830152505050565b60006135ce6135c98461357b565b613560565b9050828152602081018484840111156135ea576135e96134fb565b5b6135f58482856135ac565b509392505050565b600082601f830112613612576136116134f6565b5b81356136228482602086016135bb565b91505092915050565b6000806000806080858703121561364557613644613031565b5b60006136538782880161327e565b94505060206136648782880161327e565b9350506040613675878288016131c9565b925050606085013567ffffffffffffffff81111561369657613695613036565b5b6136a2878288016135fd565b91505092959194509250565b600080604083850312156136c5576136c4613031565b5b60006136d38582860161327e565b92505060206136e48582860161327e565b9150509250929050565b600060ff82169050919050565b613704816136ee565b82525050565b600060208201905061371f60008301846136fb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061376c57607f821691505b60208210810361377f5761377e613725565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137e1602183613101565b91506137ec82613785565b604082019050919050565b60006020820190508181036000830152613810816137d4565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613873603d83613101565b915061387e82613817565b604082019050919050565b600060208201905081810360008301526138a281613866565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613905602d83613101565b9150613910826138a9565b604082019050919050565b60006020820190508181036000830152613934816138f8565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613997602b83613101565b91506139a28261393b565b604082019050919050565b600060208201905081810360008301526139c68161398a565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613a29602f83613101565b9150613a34826139cd565b604082019050919050565b60006020820190508181036000830152613a5881613a1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a99826131a8565b9150613aa4836131a8565b925082613ab457613ab3613a5f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b28826131a8565b9150613b33836131a8565b9250828201905080821115613b4b57613b4a613aee565b5b92915050565b6000613b5c826136ee565b915060ff8203613b6f57613b6e613aee565b5b600182019050919050565b600081905092915050565b6000613b90826130f6565b613b9a8185613b7a565b9350613baa818560208601613112565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000613be88286613b85565b9150613bf382613bb6565b600182019150613c038285613b85565b9150613c0e82613bb6565b600182019150613c1e8284613b85565b9150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c8d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c50565b613c978683613c50565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613cd4613ccf613cca846131a8565b613caf565b6131a8565b9050919050565b6000819050919050565b613cee83613cb9565b613d02613cfa82613cdb565b848454613c5d565b825550505050565b600090565b613d17613d0a565b613d22818484613ce5565b505050565b5b81811015613d4657613d3b600082613d0f565b600181019050613d28565b5050565b601f821115613d8b57613d5c81613c2b565b613d6584613c40565b81016020851015613d74578190505b613d88613d8085613c40565b830182613d27565b50505b505050565b600082821c905092915050565b6000613dae60001984600802613d90565b1980831691505092915050565b6000613dc78383613d9d565b9150826002028217905092915050565b613de0826130f6565b67ffffffffffffffff811115613df957613df8613500565b5b613e038254613754565b613e0e828285613d4a565b600060209050601f831160018114613e415760008415613e2f578287015190505b613e398582613dbb565b865550613ea1565b601f198416613e4f86613c2b565b60005b82811015613e7757848901518255600182019150602085019450602081019050613e52565b86831015613e945784890151613e90601f891682613d9d565b8355505b6001600288020188555050505b505050505050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613f05602c83613101565b9150613f1082613ea9565b604082019050919050565b60006020820190508181036000830152613f3481613ef8565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613f71601883613101565b9150613f7c82613f3b565b602082019050919050565b60006020820190508181036000830152613fa081613f64565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614003602983613101565b915061400e82613fa7565b604082019050919050565b6000602082019050818103600083015261403281613ff6565b9050919050565b600082825260208201905092915050565b6000815461405781613754565b6140618186614039565b9450600182166000811461407c5760018114614092576140c5565b60ff1983168652811515602002860193506140c5565b61409b85613c2b565b60005b838110156140bd5781548189015260018201915060208101905061409e565b808801955050505b50505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b614108816136ee565b82525050565b60008160001c9050919050565b600060ff82169050919050565b600061413b6141368361410e565b61411b565b9050919050565b60008160081c9050919050565b600061416261415d83614142565b61411b565b9050919050565b60008160101c9050919050565b600061418961418483614169565b61411b565b9050919050565b60008160181c9050919050565b60006141b06141ab83614190565b61411b565b9050919050565b60008160201c9050919050565b60006141d76141d2836141b7565b61411b565b9050919050565b60008160281c9050919050565b60006141fe6141f9836141de565b61411b565b9050919050565b60008160301c9050919050565b600061422561422083614205565b61411b565b9050919050565b60008160381c9050919050565b600061424c6142478361422c565b61411b565b9050919050565b60008160401c9050919050565b600061427361426e83614253565b61411b565b9050919050565b60008160481c9050919050565b600061429a6142958361427a565b61411b565b9050919050565b60008160501c9050919050565b60006142c16142bc836142a1565b61411b565b9050919050565b60008160581c9050919050565b60006142e86142e3836142c8565b61411b565b9050919050565b60008160601c9050919050565b600061430f61430a836142ef565b61411b565b9050919050565b60008160681c9050919050565b600061433661433183614316565b61411b565b9050919050565b60008160701c9050919050565b600061435d6143588361433d565b61411b565b9050919050565b60008160781c9050919050565b600061438461437f83614364565b61411b565b9050919050565b60008160801c9050919050565b60006143ab6143a68361438b565b61411b565b9050919050565b60008160881c9050919050565b60006143d26143cd836143b2565b61411b565b9050919050565b60008160901c9050919050565b60006143f96143f4836143d9565b61411b565b9050919050565b60008160981c9050919050565b600061442061441b83614400565b61411b565b9050919050565b60008160a01c9050919050565b600061444761444283614427565b61411b565b9050919050565b60008160a81c9050919050565b600061446e6144698361444e565b61411b565b9050919050565b60008160b01c9050919050565b600061449561449083614475565b61411b565b9050919050565b60008160b81c9050919050565b60006144bc6144b78361449c565b61411b565b9050919050565b60008160c01c9050919050565b60006144e36144de836144c3565b61411b565b9050919050565b60008160c81c9050919050565b600061450a614505836144ea565b61411b565b9050919050565b60008160d01c9050919050565b600061453161452c83614511565b61411b565b9050919050565b60008160d81c9050919050565b600061455861455383614538565b61411b565b9050919050565b60008160e01c9050919050565b600061457f61457a8361455f565b61411b565b9050919050565b60008160e81c9050919050565b60006145a66145a183614586565b61411b565b9050919050565b60008160f01c9050919050565b60006145cd6145c8836145ad565b61411b565b9050919050565b60008160f81c9050919050565b60006145f46145ef836145d4565b61411b565b9050919050565b6000614606826140ce565b61461081856140d9565b93508361461c846140ea565b6000600115614949575b836001602003820110156149485781546146488861464383614128565b6140ff565b6020880197506146608861465b8361414f565b6140ff565b6020880197506146788861467383614176565b6140ff565b6020880197506146908861468b8361419d565b6140ff565b6020880197506146a8886146a3836141c4565b6140ff565b6020880197506146c0886146bb836141eb565b6140ff565b6020880197506146d8886146d383614212565b6140ff565b6020880197506146f0886146eb83614239565b6140ff565b6020880197506147088861470383614260565b6140ff565b6020880197506147208861471b83614287565b6140ff565b60208801975061473888614733836142ae565b6140ff565b6020880197506147508861474b836142d5565b6140ff565b60208801975061476888614763836142fc565b6140ff565b6020880197506147808861477b83614323565b6140ff565b602088019750614798886147938361434a565b6140ff565b6020880197506147b0886147ab83614371565b6140ff565b6020880197506147c8886147c383614398565b6140ff565b6020880197506147e0886147db836143bf565b6140ff565b6020880197506147f8886147f3836143e6565b6140ff565b6020880197506148108861480b8361440d565b6140ff565b6020880197506148288861482383614434565b6140ff565b6020880197506148408861483b8361445b565b6140ff565b6020880197506148588861485383614482565b6140ff565b6020880197506148708861486b836144a9565b6140ff565b60208801975061488888614883836144d0565b6140ff565b6020880197506148a08861489b836144f7565b6140ff565b6020880197506148b8886148b38361451e565b6140ff565b6020880197506148d0886148cb83614545565b6140ff565b6020880197506148e8886148e38361456c565b6140ff565b602088019750614900886148fb83614593565b6140ff565b60208801975061491888614913836145ba565b6140ff565b6020880197506149308861492b836145e1565b6140ff565b60208801975060018301925050602081019050614626565b5b600115614e34578154848210156149795761496c8861496783614128565b6140ff565b6020880197506001820191505b848210156149a0576149938861498e8361414f565b6140ff565b6020880197506001820191505b848210156149c7576149ba886149b583614176565b6140ff565b6020880197506001820191505b848210156149ee576149e1886149dc8361419d565b6140ff565b6020880197506001820191505b84821015614a1557614a0888614a03836141c4565b6140ff565b6020880197506001820191505b84821015614a3c57614a2f88614a2a836141eb565b6140ff565b6020880197506001820191505b84821015614a6357614a5688614a5183614212565b6140ff565b6020880197506001820191505b84821015614a8a57614a7d88614a7883614239565b6140ff565b6020880197506001820191505b84821015614ab157614aa488614a9f83614260565b6140ff565b6020880197506001820191505b84821015614ad857614acb88614ac683614287565b6140ff565b6020880197506001820191505b84821015614aff57614af288614aed836142ae565b6140ff565b6020880197506001820191505b84821015614b2657614b1988614b14836142d5565b6140ff565b6020880197506001820191505b84821015614b4d57614b4088614b3b836142fc565b6140ff565b6020880197506001820191505b84821015614b7457614b6788614b6283614323565b6140ff565b6020880197506001820191505b84821015614b9b57614b8e88614b898361434a565b6140ff565b6020880197506001820191505b84821015614bc257614bb588614bb083614371565b6140ff565b6020880197506001820191505b84821015614be957614bdc88614bd783614398565b6140ff565b6020880197506001820191505b84821015614c1057614c0388614bfe836143bf565b6140ff565b6020880197506001820191505b84821015614c3757614c2a88614c25836143e6565b6140ff565b6020880197506001820191505b84821015614c5e57614c5188614c4c8361440d565b6140ff565b6020880197506001820191505b84821015614c8557614c7888614c7383614434565b6140ff565b6020880197506001820191505b84821015614cac57614c9f88614c9a8361445b565b6140ff565b6020880197506001820191505b84821015614cd357614cc688614cc183614482565b6140ff565b6020880197506001820191505b84821015614cfa57614ced88614ce8836144a9565b6140ff565b6020880197506001820191505b84821015614d2157614d1488614d0f836144d0565b6140ff565b6020880197506001820191505b84821015614d4857614d3b88614d36836144f7565b6140ff565b6020880197506001820191505b84821015614d6f57614d6288614d5d8361451e565b6140ff565b6020880197506001820191505b84821015614d9657614d8988614d8483614545565b6140ff565b6020880197506001820191505b84821015614dbd57614db088614dab8361456c565b6140ff565b6020880197506001820191505b84821015614de457614dd788614dd283614593565b6140ff565b6020880197506001820191505b84821015614e0b57614dfe88614df9836145ba565b6140ff565b6020880197506001820191505b84821015614e3257614e2588614e20836145e1565b6140ff565b6020880197506001820191505b505b8694505050505092915050565b60006040820190508181036000830152614e5b818561404a565b90508181036020830152614e6f81846145fb565b90509392505050565b6000614e8b614e868461357b565b613560565b905082815260208101848484011115614ea757614ea66134fb565b5b614eb2848285613112565b509392505050565b600082601f830112614ecf57614ece6134f6565b5b8151614edf848260208601614e78565b91505092915050565b600060208284031215614efe57614efd613031565b5b600082015167ffffffffffffffff811115614f1c57614f1b613036565b5b614f2884828501614eba565b91505092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614f8d602583613101565b9150614f9882614f31565b604082019050919050565b60006020820190508181036000830152614fbc81614f80565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061501f602483613101565b915061502a82614fc3565b604082019050919050565b6000602082019050818103600083015261504e81615012565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061508b601983613101565b915061509682615055565b602082019050919050565b600060208201905081810360008301526150ba8161507e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061511d603283613101565b9150615128826150c1565b604082019050919050565b6000602082019050818103600083015261514c81615110565b9050919050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000615189601a83613b7a565b915061519482615153565b601a82019050919050565b60006151aa8261517c565b91506151b68284613b85565b915081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006151f7600183613b7a565b9150615202826151c1565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b6000615243600983613b7a565b915061524e8261520d565b600982019050919050565b7f222c200000000000000000000000000000000000000000000000000000000000600082015250565b600061528f600383613b7a565b915061529a82615259565b600382019050919050565b7f226465736372697074696f6e223a220000000000000000000000000000000000600082015250565b60006152db600f83613b7a565b91506152e6826152a5565b600f82019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b6000615327600a83613b7a565b9150615332826152f1565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b6000615373600183613b7a565b915061537e8261533d565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006153bf600183613b7a565b91506153ca82615389565b600182019050919050565b60006153e0826151ea565b91506153eb82615236565b91506153f78286613b85565b915061540282615282565b915061540d826152ce565b91506154198285613b85565b915061542482615282565b915061542f8261531a565b915061543b8284613b85565b915061544682615366565b9150615451826153b2565b9150819050949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000615494601d83613b7a565b915061549f8261545e565b601d82019050919050565b60006154b582615487565b91506154c18284613b85565b915081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615502601783613b7a565b915061550d826154cc565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061554e601183613b7a565b915061555982615518565b601182019050919050565b600061556f826154f5565b915061557b8285613b85565b915061558682615541565b91506155928284613b85565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60006155c58261559e565b6155cf81856155a9565b93506155df818560208601613112565b6155e88161313c565b840191505092915050565b6000608082019050615608600083018761323d565b615615602083018661323d565b61562260408301856132d3565b818103606083015261563481846155ba565b905095945050505050565b60008151905061564e81613067565b92915050565b60006020828403121561566a57615669613031565b5b60006156788482850161563f565b91505092915050565b600061568c826131a8565b9150615697836131a8565b9250826156a7576156a6613a5f565b5b828204905092915050565b60006156bd826131a8565b91506156c8836131a8565b92508282026156d6816131a8565b915082820484148315176156ed576156ec613aee565b5b5092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615750603583613101565b915061575b826156f4565b604082019050919050565b6000602082019050818103600083015261577f81615743565b9050919050565b6000615791826131a8565b9150600082036157a4576157a3613aee565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006157e5602083613101565b91506157f0826157af565b602082019050919050565b60006020820190508181036000830152615814816157d8565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615851602083613101565b915061585c8261581b565b602082019050919050565b6000602082019050818103600083015261588081615844565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006158bd601c83613101565b91506158c882615887565b602082019050919050565b600060208201905081810360008301526158ec816158b0565b9050919050565b60006158fe826131a8565b9150615909836131a8565b925082820390508181111561592157615920613aee565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205a4fa315c0d67c456f0ce8ac45c1171aa93503df04ad2c8768a18f78336541e064736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806391d148541161010f578063bd11f69d116100a2578063d547741f11610071578063d547741f14610617578063dbdff2c114610633578063e985e9c514610651578063ec4d5ce214610681576101f0565b8063bd11f69d14610569578063c46e63f414610599578063c87b56dd146105c9578063d5391393146105f9576101f0565b8063a217fddf116100de578063a217fddf146104f5578063a22cb46514610513578063b88d4fde1461052f578063ba23ec8e1461054b576101f0565b806391d148541461045957806395d89b411461048957806395fa9135146104a757806398bdf6f5146104d7576101f0565b80632f745c591161018757806342842e0e1161015657806342842e0e146103ad5780634f6ccce7146103c95780636352211e146103f957806370a0823114610429576101f0565b80632f745c591461031557806336568abe146103455780633c051a921461036157806340d097c314610391576101f0565b806318160ddd116101c357806318160ddd1461028f57806323b872dd146102ad578063248a9ca3146102c95780632f2ff15d146102f9576101f0565b806301ffc9a7146101f557806306fdde0314610225578063081812fc14610243578063095ea7b314610273575b600080fd5b61020f600480360381019061020a9190613093565b6106b1565b60405161021c91906130db565b60405180910390f35b61022d6106c3565b60405161023a9190613186565b60405180910390f35b61025d600480360381019061025891906131de565b610755565b60405161026a919061324c565b60405180910390f35b61028d60048036038101906102889190613293565b61079b565b005b6102976108b2565b6040516102a491906132e2565b60405180910390f35b6102c760048036038101906102c291906132fd565b6108bf565b005b6102e360048036038101906102de9190613386565b61091f565b6040516102f091906133c2565b60405180910390f35b610313600480360381019061030e91906133dd565b61093f565b005b61032f600480360381019061032a9190613293565b610960565b60405161033c91906132e2565b60405180910390f35b61035f600480360381019061035a91906133dd565b610a05565b005b61037b6004803603810190610376919061341d565b610a88565b60405161038891906132e2565b60405180910390f35b6103ab60048036038101906103a6919061345d565b610ad0565b005b6103c760048036038101906103c291906132fd565b610d94565b005b6103e360048036038101906103de91906131de565b610db4565b6040516103f091906132e2565b60405180910390f35b610413600480360381019061040e91906131de565b610e25565b604051610420919061324c565b60405180910390f35b610443600480360381019061043e919061345d565b610eab565b60405161045091906132e2565b60405180910390f35b610473600480360381019061046e91906133dd565b610f62565b60405161048091906130db565b60405180910390f35b610491610fcd565b60405161049e9190613186565b60405180910390f35b6104c160048036038101906104bc91906131de565b61105f565b6040516104ce91906132e2565b60405180910390f35b6104df61109b565b6040516104ec91906132e2565b60405180910390f35b6104fd6110a7565b60405161050a91906133c2565b60405180910390f35b61052d600480360381019061052891906134b6565b6110ae565b005b6105496004803603810190610544919061362b565b6110c4565b005b610553611126565b60405161056091906133c2565b60405180910390f35b610583600480360381019061057e91906131de565b611148565b6040516105909190613186565b60405180910390f35b6105b360048036038101906105ae91906131de565b6111e8565b6040516105c091906132e2565b60405180910390f35b6105e360048036038101906105de91906131de565b611204565b6040516105f09190613186565b60405180910390f35b6106016112fe565b60405161060e91906133c2565b60405180910390f35b610631600480360381019061062c91906133dd565b611322565b005b61063b611343565b60405161064891906132e2565b60405180910390f35b61066b600480360381019061066691906136ae565b611355565b60405161067891906130db565b60405180910390f35b61069b6004803603810190610696919061341d565b6113e9565b6040516106a8919061370a565b60405180910390f35b60006106bc8261142c565b9050919050565b6060600080546106d290613754565b80601f01602080910402602001604051908101604052809291908181526020018280546106fe90613754565b801561074b5780601f106107205761010080835404028352916020019161074b565b820191906000526020600020905b81548152906001019060200180831161072e57829003601f168201915b5050505050905090565b6000610760826114a6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107a682610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d906137f7565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166108356114f1565b73ffffffffffffffffffffffffffffffffffffffff16148061086457506108638161085e6114f1565b611355565b5b6108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a90613889565b60405180910390fd5b6108ad83836114f9565b505050565b6000600880549050905090565b6108d06108ca6114f1565b826115b2565b61090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109069061391b565b60405180910390fd5b61091a838383611647565b505050565b6000600b6000838152602001908152602001600020600101549050919050565b6109488261091f565b61095181611940565b61095b8383611954565b505050565b600061096b83610eab565b82106109ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a3906139ad565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b610a0d6114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190613a3f565b60405180910390fd5b610a848282611a35565b5050565b60008183610a94611343565b17604051602001610aa591906132e2565b6040516020818303038152906040528051906020012060001c610ac89190613a8e565b905092915050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6610afa81611940565b6000610b06600c611b17565b9050610b12600c611b25565b610b1c8382611b3b565b60006006905060008160ff1667ffffffffffffffff811115610b4157610b40613500565b5b604051908082528060200260200182016040528015610b6f5781602001602082028036833780820191505090505b50905060005b8260ff168160ff161015610c245760038160ff161015610bcc57610b9d8160ff1660ff610a88565b828260ff1681518110610bb357610bb2613abf565b5b602002602001019060ff16908160ff1681525050610c11565b610bda8160ff166024610a88565b6001610be69190613b1d565b828260ff1681518110610bfc57610bfb613abf565b5b602002602001019060ff16908160ff16815250505b8080610c1c90613b51565b915050610b75565b50610c4c81600081518110610c3c57610c3b613abf565b5b602002602001015160ff16611b59565b610c7382600181518110610c6357610c62613abf565b5b602002602001015160ff16611b59565b610c9a83600281518110610c8a57610c89613abf565b5b602002602001015160ff16611b59565b604051602001610cac93929190613bdc565b604051602081830303815290604052600d6000610cc9600c611b17565b81526020019081526020016000209081610ce39190613dd7565b50604051806060016040528082600381518110610d0357610d02613abf565b5b602002602001015160ff1660ff16815260200182600481518110610d2a57610d29613abf565b5b602002602001015160ff1660ff16815260200182600581518110610d5157610d50613abf565b5b602002602001015160ff1660ff16815250600e6000610d70600c611b17565b8152602001908152602001600020906003610d8c929190612f63565b505050505050565b610daf838383604051806020016040528060008152506110c4565b505050565b6000610dbe6108b2565b8210610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690613f1b565b60405180910390fd5b60088281548110610e1357610e12613abf565b5b90600052602060002001549050919050565b600080610e3183611c27565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9990613f87565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1290614019565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b606060018054610fdc90613754565b80601f016020809104026020016040519081016040528092919081815260200182805461100890613754565b80156110555780601f1061102a57610100808354040283529160200191611055565b820191906000526020600020905b81548152906001019060200180831161103857829003601f168201915b5050505050905090565b60008161106a611343565b1760405160200161107b91906132e2565b6040516020818303038152906040528051906020012060001c9050919050565b600c8060000154905081565b6000801b81565b6110c06110b96114f1565b8383611c64565b5050565b6110d56110cf6114f1565b836115b2565b611114576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110b9061391b565b60405180910390fd5b61112084848484611dd0565b50505050565b60006040516000810160208160008060185afa61113f57fe5b81519250505090565b600d602052806000526040600020600091509050805461116790613754565b80601f016020809104026020016040519081016040528092919081815260200182805461119390613754565b80156111e05780601f106111b5576101008083540402835291602001916111e0565b820191906000526020600020905b8154815290600101906020018083116111c357829003601f168201915b505050505081565b6000816111f3611343565b6111fd9190613a8e565b9050919050565b60606112f76112116106c3565b6040518060400160405280601a81526020017f44796e616d6963204e465420536d61727420436f6e74726163740000000000008152506112f273__$ad5092d2d81381a97940758c959052a4e8$__63452955e4600d6000898152602001908152602001600020600e60008a81526020019081526020016000206040518363ffffffff1660e01b81526004016112a7929190614e41565b600060405180830381865af41580156112c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112ed9190614ee8565b611e2c565b611e5d565b9050919050565b7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b61132b8261091f565b61133481611940565b61133e8383611a35565b505050565b600061134d611126565b60001c905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600e602052816000526040600020818154811061140557600080fd5b9060005260206000209060209182820401919006915091509054906101000a900460ff1681565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061149f575061149e82611eb3565b5b9050919050565b6114af81611f14565b6114ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e590613f87565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661156c83610e25565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806115be83610e25565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061160057506115ff8185611355565b5b8061163e57508373ffffffffffffffffffffffffffffffffffffffff1661162684610755565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661166782610e25565b73ffffffffffffffffffffffffffffffffffffffff16146116bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b490614fa3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361172c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172390615035565b60405180910390fd5b6117398383836001611f55565b8273ffffffffffffffffffffffffffffffffffffffff1661175982610e25565b73ffffffffffffffffffffffffffffffffffffffff16146117af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a690614fa3565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461193b8383836001611f67565b505050565b6119518161194c6114f1565b611f6d565b50565b61195e8282610f62565b611a31576001600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506119d66114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611a3f8282610f62565b15611b13576000600b600084815260200190815260200160002060000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550611ab86114f1565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600081600001549050919050565b6001816000016000828254019250508190555050565b611b55828260405180602001604052806000815250611ff2565b5050565b606060006001611b688461204d565b01905060008167ffffffffffffffff811115611b8757611b86613500565b5b6040519080825280601f01601f191660200182016040528015611bb95781602001600182028036833780820191505090505b509050600082602001820190505b600115611c1c578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c1057611c0f613a5f565b5b04945060008503611bc7575b819350505050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cc9906150a1565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611dc391906130db565b60405180910390a3505050565b611ddb848484611647565b611de7848484846121a0565b611e26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1d90615133565b60405180910390fd5b50505050565b6060611e3782612327565b604051602001611e47919061519f565b6040516020818303038152906040529050919050565b6060611e8b848484604051602001611e77939291906153d5565b604051602081830303815290604052612327565b604051602001611e9b91906154aa565b60405160208183030381529060405290509392505050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480611f0d5750611f0c8261248a565b5b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16611f3683611c27565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b611f6184848484612504565b50505050565b50505050565b611f778282610f62565b611fee57611f8481612662565b611f928360001c602061268f565b604051602001611fa3929190615564565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe59190613186565b60405180910390fd5b5050565b611ffc83836128cb565b61200960008484846121a0565b612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90615133565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106120ab577a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083816120a1576120a0613a5f565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106120e8576d04ee2d6d415b85acef810000000083816120de576120dd613a5f565b5b0492506020810190505b662386f26fc10000831061211757662386f26fc10000838161210d5761210c613a5f565b5b0492506010810190505b6305f5e1008310612140576305f5e100838161213657612135613a5f565b5b0492506008810190505b612710831061216557612710838161215b5761215a613a5f565b5b0492506004810190505b60648310612188576064838161217e5761217d613a5f565b5b0492506002810190505b600a8310612197576001810190505b80915050919050565b60006121c18473ffffffffffffffffffffffffffffffffffffffff16612ae8565b1561231a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121ea6114f1565b8786866040518563ffffffff1660e01b815260040161220c94939291906155f3565b6020604051808303816000875af192505050801561224857506040513d601f19601f820116820180604052508101906122459190615654565b60015b6122ca573d8060008114612278576040519150601f19603f3d011682016040523d82523d6000602084013e61227d565b606091505b5060008151036122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b990615133565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061231f565b600190505b949350505050565b6060600082510361234957604051806020016040528060008152509050612485565b600060405180606001604052806040815260200161595760409139905060006003600285516123789190613b1d565b6123829190615681565b600461238e91906156b2565b67ffffffffffffffff8111156123a7576123a6613500565b5b6040519080825280601f01601f1916602001820160405280156123d95781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015612445576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506123ea565b505060038651066001811461246157600281146124745761247c565b603d6001830353603d600283035361247c565b603d60018303535b50505080925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806124fd57506124fc82612b0b565b5b9050919050565b61251084848484612bed565b6001811115612554576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254b90615766565b60405180910390fd5b6000829050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361259b5761259681612bf3565b6125da565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146125d9576125d88582612c3c565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361261c5761261781612da9565b61265b565b8473ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461265a576126598482612e7a565b5b5b5050505050565b60606126888273ffffffffffffffffffffffffffffffffffffffff16601460ff1661268f565b9050919050565b6060600060028360026126a291906156b2565b6126ac9190613b1d565b67ffffffffffffffff8111156126c5576126c4613500565b5b6040519080825280601f01601f1916602001820160405280156126f75781602001600182028036833780820191505090505b5090507f30000000000000000000000000000000000000000000000000000000000000008160008151811061272f5761272e613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061279357612792613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600060018460026127d391906156b2565b6127dd9190613b1d565b90505b600181111561287d577f3031323334353637383961626364656600000000000000000000000000000000600f86166010811061281f5761281e613abf565b5b1a60f81b82828151811061283657612835613abf565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600485901c94508061287690615786565b90506127e0565b50600084146128c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b8906157fb565b60405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361293a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293190615867565b60405180910390fd5b61294381611f14565b15612983576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161297a906158d3565b60405180910390fd5b612991600083836001611f55565b61299a81611f14565b156129da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129d1906158d3565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612ae4600083836001611f67565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612bd657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80612be65750612be582612ef9565b5b9050919050565b50505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006001612c4984610eab565b612c5391906158f3565b9050600060076000848152602001908152602001600020549050818114612d38576000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002054905080600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600084815260200190815260200160002081905550816007600083815260200190815260200160002081905550505b6007600084815260200190815260200160002060009055600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008381526020019081526020016000206000905550505050565b60006001600880549050612dbd91906158f3565b9050600060096000848152602001908152602001600020549050600060088381548110612ded57612dec613abf565b5b906000526020600020015490508060088381548110612e0f57612e0e613abf565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480612e5e57612e5d615927565b5b6001900381819060005260206000200160009055905550505050565b6000612e8583610eab565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b82805482825590600052602060002090601f01602090048101928215612ff95791602002820160005b83821115612fca57835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302612f8c565b8015612ff75782816101000a81549060ff0219169055600101602081600001049283019260010302612fca565b505b509050613006919061300a565b5090565b5b8082111561302357600081600090555060010161300b565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6130708161303b565b811461307b57600080fd5b50565b60008135905061308d81613067565b92915050565b6000602082840312156130a9576130a8613031565b5b60006130b78482850161307e565b91505092915050565b60008115159050919050565b6130d5816130c0565b82525050565b60006020820190506130f060008301846130cc565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613130578082015181840152602081019050613115565b60008484015250505050565b6000601f19601f8301169050919050565b6000613158826130f6565b6131628185613101565b9350613172818560208601613112565b61317b8161313c565b840191505092915050565b600060208201905081810360008301526131a0818461314d565b905092915050565b6000819050919050565b6131bb816131a8565b81146131c657600080fd5b50565b6000813590506131d8816131b2565b92915050565b6000602082840312156131f4576131f3613031565b5b6000613202848285016131c9565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006132368261320b565b9050919050565b6132468161322b565b82525050565b6000602082019050613261600083018461323d565b92915050565b6132708161322b565b811461327b57600080fd5b50565b60008135905061328d81613267565b92915050565b600080604083850312156132aa576132a9613031565b5b60006132b88582860161327e565b92505060206132c9858286016131c9565b9150509250929050565b6132dc816131a8565b82525050565b60006020820190506132f760008301846132d3565b92915050565b60008060006060848603121561331657613315613031565b5b60006133248682870161327e565b93505060206133358682870161327e565b9250506040613346868287016131c9565b9150509250925092565b6000819050919050565b61336381613350565b811461336e57600080fd5b50565b6000813590506133808161335a565b92915050565b60006020828403121561339c5761339b613031565b5b60006133aa84828501613371565b91505092915050565b6133bc81613350565b82525050565b60006020820190506133d760008301846133b3565b92915050565b600080604083850312156133f4576133f3613031565b5b600061340285828601613371565b92505060206134138582860161327e565b9150509250929050565b6000806040838503121561343457613433613031565b5b6000613442858286016131c9565b9250506020613453858286016131c9565b9150509250929050565b60006020828403121561347357613472613031565b5b60006134818482850161327e565b91505092915050565b613493816130c0565b811461349e57600080fd5b50565b6000813590506134b08161348a565b92915050565b600080604083850312156134cd576134cc613031565b5b60006134db8582860161327e565b92505060206134ec858286016134a1565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6135388261313c565b810181811067ffffffffffffffff8211171561355757613556613500565b5b80604052505050565b600061356a613027565b9050613576828261352f565b919050565b600067ffffffffffffffff82111561359657613595613500565b5b61359f8261313c565b9050602081019050919050565b82818337600083830152505050565b60006135ce6135c98461357b565b613560565b9050828152602081018484840111156135ea576135e96134fb565b5b6135f58482856135ac565b509392505050565b600082601f830112613612576136116134f6565b5b81356136228482602086016135bb565b91505092915050565b6000806000806080858703121561364557613644613031565b5b60006136538782880161327e565b94505060206136648782880161327e565b9350506040613675878288016131c9565b925050606085013567ffffffffffffffff81111561369657613695613036565b5b6136a2878288016135fd565b91505092959194509250565b600080604083850312156136c5576136c4613031565b5b60006136d38582860161327e565b92505060206136e48582860161327e565b9150509250929050565b600060ff82169050919050565b613704816136ee565b82525050565b600060208201905061371f60008301846136fb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061376c57607f821691505b60208210810361377f5761377e613725565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006137e1602183613101565b91506137ec82613785565b604082019050919050565b60006020820190508181036000830152613810816137d4565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613873603d83613101565b915061387e82613817565b604082019050919050565b600060208201905081810360008301526138a281613866565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000613905602d83613101565b9150613910826138a9565b604082019050919050565b60006020820190508181036000830152613934816138f8565b9050919050565b7f455243373231456e756d657261626c653a206f776e657220696e646578206f7560008201527f74206f6620626f756e6473000000000000000000000000000000000000000000602082015250565b6000613997602b83613101565b91506139a28261393b565b604082019050919050565b600060208201905081810360008301526139c68161398a565b9050919050565b7f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560008201527f20726f6c657320666f722073656c660000000000000000000000000000000000602082015250565b6000613a29602f83613101565b9150613a34826139cd565b604082019050919050565b60006020820190508181036000830152613a5881613a1c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613a99826131a8565b9150613aa4836131a8565b925082613ab457613ab3613a5f565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613b28826131a8565b9150613b33836131a8565b9250828201905080821115613b4b57613b4a613aee565b5b92915050565b6000613b5c826136ee565b915060ff8203613b6f57613b6e613aee565b5b600182019050919050565b600081905092915050565b6000613b90826130f6565b613b9a8185613b7a565b9350613baa818560208601613112565b80840191505092915050565b7f2c00000000000000000000000000000000000000000000000000000000000000815250565b6000613be88286613b85565b9150613bf382613bb6565b600182019150613c038285613b85565b9150613c0e82613bb6565b600182019150613c1e8284613b85565b9150819050949350505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302613c8d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82613c50565b613c978683613c50565b95508019841693508086168417925050509392505050565b6000819050919050565b6000613cd4613ccf613cca846131a8565b613caf565b6131a8565b9050919050565b6000819050919050565b613cee83613cb9565b613d02613cfa82613cdb565b848454613c5d565b825550505050565b600090565b613d17613d0a565b613d22818484613ce5565b505050565b5b81811015613d4657613d3b600082613d0f565b600181019050613d28565b5050565b601f821115613d8b57613d5c81613c2b565b613d6584613c40565b81016020851015613d74578190505b613d88613d8085613c40565b830182613d27565b50505b505050565b600082821c905092915050565b6000613dae60001984600802613d90565b1980831691505092915050565b6000613dc78383613d9d565b9150826002028217905092915050565b613de0826130f6565b67ffffffffffffffff811115613df957613df8613500565b5b613e038254613754565b613e0e828285613d4a565b600060209050601f831160018114613e415760008415613e2f578287015190505b613e398582613dbb565b865550613ea1565b601f198416613e4f86613c2b565b60005b82811015613e7757848901518255600182019150602085019450602081019050613e52565b86831015613e945784890151613e90601f891682613d9d565b8355505b6001600288020188555050505b505050505050565b7f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60008201527f7574206f6620626f756e64730000000000000000000000000000000000000000602082015250565b6000613f05602c83613101565b9150613f1082613ea9565b604082019050919050565b60006020820190508181036000830152613f3481613ef8565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000613f71601883613101565b9150613f7c82613f3b565b602082019050919050565b60006020820190508181036000830152613fa081613f64565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614003602983613101565b915061400e82613fa7565b604082019050919050565b6000602082019050818103600083015261403281613ff6565b9050919050565b600082825260208201905092915050565b6000815461405781613754565b6140618186614039565b9450600182166000811461407c5760018114614092576140c5565b60ff1983168652811515602002860193506140c5565b61409b85613c2b565b60005b838110156140bd5781548189015260018201915060208101905061409e565b808801955050505b50505092915050565b600081549050919050565b600082825260208201905092915050565b60008190508160005260206000209050919050565b614108816136ee565b82525050565b60008160001c9050919050565b600060ff82169050919050565b600061413b6141368361410e565b61411b565b9050919050565b60008160081c9050919050565b600061416261415d83614142565b61411b565b9050919050565b60008160101c9050919050565b600061418961418483614169565b61411b565b9050919050565b60008160181c9050919050565b60006141b06141ab83614190565b61411b565b9050919050565b60008160201c9050919050565b60006141d76141d2836141b7565b61411b565b9050919050565b60008160281c9050919050565b60006141fe6141f9836141de565b61411b565b9050919050565b60008160301c9050919050565b600061422561422083614205565b61411b565b9050919050565b60008160381c9050919050565b600061424c6142478361422c565b61411b565b9050919050565b60008160401c9050919050565b600061427361426e83614253565b61411b565b9050919050565b60008160481c9050919050565b600061429a6142958361427a565b61411b565b9050919050565b60008160501c9050919050565b60006142c16142bc836142a1565b61411b565b9050919050565b60008160581c9050919050565b60006142e86142e3836142c8565b61411b565b9050919050565b60008160601c9050919050565b600061430f61430a836142ef565b61411b565b9050919050565b60008160681c9050919050565b600061433661433183614316565b61411b565b9050919050565b60008160701c9050919050565b600061435d6143588361433d565b61411b565b9050919050565b60008160781c9050919050565b600061438461437f83614364565b61411b565b9050919050565b60008160801c9050919050565b60006143ab6143a68361438b565b61411b565b9050919050565b60008160881c9050919050565b60006143d26143cd836143b2565b61411b565b9050919050565b60008160901c9050919050565b60006143f96143f4836143d9565b61411b565b9050919050565b60008160981c9050919050565b600061442061441b83614400565b61411b565b9050919050565b60008160a01c9050919050565b600061444761444283614427565b61411b565b9050919050565b60008160a81c9050919050565b600061446e6144698361444e565b61411b565b9050919050565b60008160b01c9050919050565b600061449561449083614475565b61411b565b9050919050565b60008160b81c9050919050565b60006144bc6144b78361449c565b61411b565b9050919050565b60008160c01c9050919050565b60006144e36144de836144c3565b61411b565b9050919050565b60008160c81c9050919050565b600061450a614505836144ea565b61411b565b9050919050565b60008160d01c9050919050565b600061453161452c83614511565b61411b565b9050919050565b60008160d81c9050919050565b600061455861455383614538565b61411b565b9050919050565b60008160e01c9050919050565b600061457f61457a8361455f565b61411b565b9050919050565b60008160e81c9050919050565b60006145a66145a183614586565b61411b565b9050919050565b60008160f01c9050919050565b60006145cd6145c8836145ad565b61411b565b9050919050565b60008160f81c9050919050565b60006145f46145ef836145d4565b61411b565b9050919050565b6000614606826140ce565b61461081856140d9565b93508361461c846140ea565b6000600115614949575b836001602003820110156149485781546146488861464383614128565b6140ff565b6020880197506146608861465b8361414f565b6140ff565b6020880197506146788861467383614176565b6140ff565b6020880197506146908861468b8361419d565b6140ff565b6020880197506146a8886146a3836141c4565b6140ff565b6020880197506146c0886146bb836141eb565b6140ff565b6020880197506146d8886146d383614212565b6140ff565b6020880197506146f0886146eb83614239565b6140ff565b6020880197506147088861470383614260565b6140ff565b6020880197506147208861471b83614287565b6140ff565b60208801975061473888614733836142ae565b6140ff565b6020880197506147508861474b836142d5565b6140ff565b60208801975061476888614763836142fc565b6140ff565b6020880197506147808861477b83614323565b6140ff565b602088019750614798886147938361434a565b6140ff565b6020880197506147b0886147ab83614371565b6140ff565b6020880197506147c8886147c383614398565b6140ff565b6020880197506147e0886147db836143bf565b6140ff565b6020880197506147f8886147f3836143e6565b6140ff565b6020880197506148108861480b8361440d565b6140ff565b6020880197506148288861482383614434565b6140ff565b6020880197506148408861483b8361445b565b6140ff565b6020880197506148588861485383614482565b6140ff565b6020880197506148708861486b836144a9565b6140ff565b60208801975061488888614883836144d0565b6140ff565b6020880197506148a08861489b836144f7565b6140ff565b6020880197506148b8886148b38361451e565b6140ff565b6020880197506148d0886148cb83614545565b6140ff565b6020880197506148e8886148e38361456c565b6140ff565b602088019750614900886148fb83614593565b6140ff565b60208801975061491888614913836145ba565b6140ff565b6020880197506149308861492b836145e1565b6140ff565b60208801975060018301925050602081019050614626565b5b600115614e34578154848210156149795761496c8861496783614128565b6140ff565b6020880197506001820191505b848210156149a0576149938861498e8361414f565b6140ff565b6020880197506001820191505b848210156149c7576149ba886149b583614176565b6140ff565b6020880197506001820191505b848210156149ee576149e1886149dc8361419d565b6140ff565b6020880197506001820191505b84821015614a1557614a0888614a03836141c4565b6140ff565b6020880197506001820191505b84821015614a3c57614a2f88614a2a836141eb565b6140ff565b6020880197506001820191505b84821015614a6357614a5688614a5183614212565b6140ff565b6020880197506001820191505b84821015614a8a57614a7d88614a7883614239565b6140ff565b6020880197506001820191505b84821015614ab157614aa488614a9f83614260565b6140ff565b6020880197506001820191505b84821015614ad857614acb88614ac683614287565b6140ff565b6020880197506001820191505b84821015614aff57614af288614aed836142ae565b6140ff565b6020880197506001820191505b84821015614b2657614b1988614b14836142d5565b6140ff565b6020880197506001820191505b84821015614b4d57614b4088614b3b836142fc565b6140ff565b6020880197506001820191505b84821015614b7457614b6788614b6283614323565b6140ff565b6020880197506001820191505b84821015614b9b57614b8e88614b898361434a565b6140ff565b6020880197506001820191505b84821015614bc257614bb588614bb083614371565b6140ff565b6020880197506001820191505b84821015614be957614bdc88614bd783614398565b6140ff565b6020880197506001820191505b84821015614c1057614c0388614bfe836143bf565b6140ff565b6020880197506001820191505b84821015614c3757614c2a88614c25836143e6565b6140ff565b6020880197506001820191505b84821015614c5e57614c5188614c4c8361440d565b6140ff565b6020880197506001820191505b84821015614c8557614c7888614c7383614434565b6140ff565b6020880197506001820191505b84821015614cac57614c9f88614c9a8361445b565b6140ff565b6020880197506001820191505b84821015614cd357614cc688614cc183614482565b6140ff565b6020880197506001820191505b84821015614cfa57614ced88614ce8836144a9565b6140ff565b6020880197506001820191505b84821015614d2157614d1488614d0f836144d0565b6140ff565b6020880197506001820191505b84821015614d4857614d3b88614d36836144f7565b6140ff565b6020880197506001820191505b84821015614d6f57614d6288614d5d8361451e565b6140ff565b6020880197506001820191505b84821015614d9657614d8988614d8483614545565b6140ff565b6020880197506001820191505b84821015614dbd57614db088614dab8361456c565b6140ff565b6020880197506001820191505b84821015614de457614dd788614dd283614593565b6140ff565b6020880197506001820191505b84821015614e0b57614dfe88614df9836145ba565b6140ff565b6020880197506001820191505b84821015614e3257614e2588614e20836145e1565b6140ff565b6020880197506001820191505b505b8694505050505092915050565b60006040820190508181036000830152614e5b818561404a565b90508181036020830152614e6f81846145fb565b90509392505050565b6000614e8b614e868461357b565b613560565b905082815260208101848484011115614ea757614ea66134fb565b5b614eb2848285613112565b509392505050565b600082601f830112614ecf57614ece6134f6565b5b8151614edf848260208601614e78565b91505092915050565b600060208284031215614efe57614efd613031565b5b600082015167ffffffffffffffff811115614f1c57614f1b613036565b5b614f2884828501614eba565b91505092915050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614f8d602583613101565b9150614f9882614f31565b604082019050919050565b60006020820190508181036000830152614fbc81614f80565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061501f602483613101565b915061502a82614fc3565b604082019050919050565b6000602082019050818103600083015261504e81615012565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061508b601983613101565b915061509682615055565b602082019050919050565b600060208201905081810360008301526150ba8161507e565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061511d603283613101565b9150615128826150c1565b604082019050919050565b6000602082019050818103600083015261514c81615110565b9050919050565b7f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000600082015250565b6000615189601a83613b7a565b915061519482615153565b601a82019050919050565b60006151aa8261517c565b91506151b68284613b85565b915081905092915050565b7f7b00000000000000000000000000000000000000000000000000000000000000600082015250565b60006151f7600183613b7a565b9150615202826151c1565b600182019050919050565b7f226e616d65223a20220000000000000000000000000000000000000000000000600082015250565b6000615243600983613b7a565b915061524e8261520d565b600982019050919050565b7f222c200000000000000000000000000000000000000000000000000000000000600082015250565b600061528f600383613b7a565b915061529a82615259565b600382019050919050565b7f226465736372697074696f6e223a220000000000000000000000000000000000600082015250565b60006152db600f83613b7a565b91506152e6826152a5565b600f82019050919050565b7f22696d616765223a202200000000000000000000000000000000000000000000600082015250565b6000615327600a83613b7a565b9150615332826152f1565b600a82019050919050565b7f2200000000000000000000000000000000000000000000000000000000000000600082015250565b6000615373600183613b7a565b915061537e8261533d565b600182019050919050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006153bf600183613b7a565b91506153ca82615389565b600182019050919050565b60006153e0826151ea565b91506153eb82615236565b91506153f78286613b85565b915061540282615282565b915061540d826152ce565b91506154198285613b85565b915061542482615282565b915061542f8261531a565b915061543b8284613b85565b915061544682615366565b9150615451826153b2565b9150819050949350505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000615494601d83613b7a565b915061549f8261545e565b601d82019050919050565b60006154b582615487565b91506154c18284613b85565b915081905092915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000600082015250565b6000615502601783613b7a565b915061550d826154cc565b601782019050919050565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000600082015250565b600061554e601183613b7a565b915061555982615518565b601182019050919050565b600061556f826154f5565b915061557b8285613b85565b915061558682615541565b91506155928284613b85565b91508190509392505050565b600081519050919050565b600082825260208201905092915050565b60006155c58261559e565b6155cf81856155a9565b93506155df818560208601613112565b6155e88161313c565b840191505092915050565b6000608082019050615608600083018761323d565b615615602083018661323d565b61562260408301856132d3565b818103606083015261563481846155ba565b905095945050505050565b60008151905061564e81613067565b92915050565b60006020828403121561566a57615669613031565b5b60006156788482850161563f565b91505092915050565b600061568c826131a8565b9150615697836131a8565b9250826156a7576156a6613a5f565b5b828204905092915050565b60006156bd826131a8565b91506156c8836131a8565b92508282026156d6816131a8565b915082820484148315176156ed576156ec613aee565b5b5092915050565b7f455243373231456e756d657261626c653a20636f6e736563757469766520747260008201527f616e7366657273206e6f7420737570706f727465640000000000000000000000602082015250565b6000615750603583613101565b915061575b826156f4565b604082019050919050565b6000602082019050818103600083015261577f81615743565b9050919050565b6000615791826131a8565b9150600082036157a4576157a3613aee565b5b600182039050919050565b7f537472696e67733a20686578206c656e67746820696e73756666696369656e74600082015250565b60006157e5602083613101565b91506157f0826157af565b602082019050919050565b60006020820190508181036000830152615814816157d8565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615851602083613101565b915061585c8261581b565b602082019050919050565b6000602082019050818103600083015261588081615844565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006158bd601c83613101565b91506158c882615887565b602082019050919050565b600060208201905081810360008301526158ec816158b0565b9050919050565b60006158fe826131a8565b9150615909836131a8565b925082820390508181111561592157615920613aee565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205a4fa315c0d67c456f0ce8ac45c1171aa93503df04ad2c8768a18f78336541e064736f6c63430008130033",
  "libraries": {
    "Encoder": "0x2198b119F9E4B49E6338C19C147c87096E3169c5",
    "SVG": "0xE2419bEDDe902C38ff2D9e9cAD6ca5D34B788840"
  },
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
      },
      "ApprovalForAll(address,address,bool)": {
        "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
      },
      "BatchMetadataUpdate(uint256,uint256)": {
        "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
      },
      "MetadataUpdate(uint256)": {
        "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getNextRandomNumber(uint256)": {
        "params": {
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "The randon number with an additional index iteration. This shold be used for multiple values in the same block"
        }
      },
      "getNextRandomRange(uint256,uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive",
          "nextIndex": "The nextIndex to interate the RNG value by"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getRandomBytes()": {
        "details": "Read here for how it works: https://docs.skale.network/tools/skale-specific/random-number-generator"
      },
      "getRandomNumber()": {
        "returns": {
          "_0": "The randon number"
        }
      },
      "getRandomRange(uint256)": {
        "params": {
          "max": "The maximum number the random number should be inclusive"
        },
        "returns": {
          "_0": "Random number between 0 & max"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 529,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 531,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 535,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 539,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 543,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 549,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1579,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1583,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1586,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1590,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1934,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 111,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)106_storage)"
      },
      {
        "astId": 3874,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)2537_storage"
      },
      {
        "astId": 3878,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "colors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3883,
        "contract": "contracts/DynamicNFT.sol:DynamicNFT",
        "label": "speeds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_array(t_uint8)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)106_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)106_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_uint8)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint8[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint8)dyn_storage"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2537_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2536,
            "contract": "contracts/DynamicNFT.sol:DynamicNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)106_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 103,
            "contract": "contracts/DynamicNFT.sol:DynamicNFT",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 105,
            "contract": "contracts/DynamicNFT.sol:DynamicNFT",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}